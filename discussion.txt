Discussion
----------

1. Which would be the most efficient data structure for a data set with the
   following requirements:

  - frequently removing and adding items to the beginning of the data structure

  - frequently removing and adding items to the end of the data structure

  - rarely indexing and searching

  A. A Python list B. Singly linked list C. Doubly linked list

  Explain your answer.

C - Doubly Linked List! Two links make it so we can traverse forward and backward through the list.
If we know we will be adding to the beginning AND/OR the end, the doubly linked list is the best data structure
because the first and last links point to null, so all we need to do is redirect the tail or head of the current first or last
node to the new item. Since we don't often need to index or search, it makes me think we don't want to use the regular
python list, which would be better if we want to get an item by index. We can't index into a linked list because the nodes don't have
an index, so I'd want to ask for more information about if we ever needed to index before giving my final answer -- "rarely" feels vague!  



2. Which would be the most efficient data structure for a data set with the
   following requirements:

  - order is unimportant

  -frequently adding and removing items

  - frequently looking up items

  A. A Python list  B. A Dictionary  C. Deque  D. Binary Search Tree

  Explain your answer.

B - A Dictionary! The key value pairs are not ordered, but dictionaries are fast for looking up items. 
We don't need to iterate through each item -- it is fast to add and remove items as well, and would be constant time 0(1)! 



3. Explain why looking up, adding elements, and removing elements from a 
   dictionary or hash map are all O(1) operations.

Because of the associative key/value pairs, we can immediately go to that key. It doesn't matter how many items
are in the dictionary. The run time does not depend on amount of items in the dictionary or hash map, it's constant.


4. Explain why removing elements from or adding elements to an arbitrary
   location in a Python list are O(n) operations.

Two things need to happen. To add or remove, we first have to find the item, and THEN we have to remove.
This runtime is dependent on how many items in the list. 



5. What is the correct runtime for:

  - Bubble Sort? 0(n^2)

  - Quicksort? 0(n log n)

  - Merge Sort? 0(n log n) or 0(n)

  - Insertion Sort? 0(n^2)?


6. What is the difference between a tree and a graph?

 They are both non-linear data structures.
 A graph is a group of vertices and edges where an edge connects a pair of vertices....
 A tree has a root node at the top, and is considered as a minimally connected graph free from loops or cycles.



7. Using the Python implementation of Quicksort from the instructions:

  Given the list [8, 4, 1, 6, 5, 2, 7, 3]:
  When this function is initially called, what are the values of:

    - lst - [8, 4, 1, 6, 5, 2, 7, 3]

    - pivot - 6

    - lo - [4, 1, 5, 2, 3]

    - hi - [8, 7]



  When the quicksort is first called recursively on the `lo` list, what are the
  values of:

  - lst - [4, 1, 5, 2, 3]

  - pivot -

  - lo -

  - hi -
